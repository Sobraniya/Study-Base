package com.cloud.socket;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.Socket;
import java.net.URL;
import java.net.UnknownHostException;
import java.nio.CharBuffer;
import java.nio.charset.StandardCharsets;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.TimeZone;

import org.json.simple.JSONObject;
import org.springframework.http.HttpEntity;
import org.springframework.web.client.RestTemplate;

import com.cloud.boot.CloudBoot;

public class ProxyThread extends Thread {
	private Socket socketObject = null;
	private static final int BUFFER_SIZE = 1024;
	private URL cloudEndpoint;
	private String header;
	private String body;

	public ProxyThread(Socket eclipseSocket) {
		this.socketObject = eclipseSocket;
	}

	public void run() {
		System.out.println("=================== New Thread started ===============" + Thread.currentThread().getName());
		try {
			this.mainRunner();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void mainRunner() throws IOException, ParseException {
		this.setHeaderBody();
		String response = this.forwardToSpringBoot();
		System.out.println("Response#1: " + response);
		this.returnpCloudyResponse();
		
	}

	private void readHeaderAndBody() {
		// Read Headers ===
		BufferedReader eclipseInReader = new BufferedReader(new InputStreamReader(eclipseSocket.getInputStream(), StandardCharsets.UTF_8));

		// Process Headers ===
		String headerString = readHeader(eclipseInReader);
		ParsedRequestHeader header = ParsedRequestHeader.parse(headerString);

		// Read Body ===
		bodyString = readBody(eclipseInReader, header);
	}
	
	private void setHeaderBody() throws IOException, ParseException {
		this.header = "";
		BufferedReader eclipseInReader = new BufferedReader(
				new InputStreamReader(this.socketObject.getInputStream(), StandardCharsets.UTF_8));
		String line = null;
		while ((line = eclipseInReader.readLine()) != null) {
			line = line + "\r\n";
			if (line.isEmpty() || line.contentEquals("\r\n")) {
				System.out.println("Header reddddd: " + this.header);
				this.setBody(eclipseInReader);
				break;
			}

			this.header += line;
		}
		this.header.trim();
	}

	private void setBody(BufferedReader eclipseInReader) throws IOException {
		String line = null;
		this.body = "";
		System.out.println("Body.....reding");
		while (true) {
			CharBuffer buffer = CharBuffer.allocate(ProxyThread.BUFFER_SIZE);
			int charactersRead = eclipseInReader.read(buffer);
			line = new String(buffer.array());
			this.body += line;
			if (charactersRead < ProxyThread.BUFFER_SIZE) {
				break;
			}

		}
		this.body.trim();
		System.out.println("Ended Happ");
	}

	private String forwardToSpringBoot() throws MalformedURLException, UnknownHostException {
		this.cloudEndpoint = this.getCloudEndPoint();
		return this.doPostApi();
	}

	private URL getCloudEndPoint() throws MalformedURLException, UnknownHostException {

		URL endpoint = CloudBoot.getInstance().getEndpoint();
		System.out.println(endpoint);
		return endpoint;
	}

	@SuppressWarnings("unchecked")
	private String doPostApi() {
		RestTemplate restTemplate = new RestTemplate();
		JSONObject jsonObject = new JSONObject();
		System.out.println("Forawrding Body: " + this.body);
		jsonObject.put("header", this.getHeadersJsonString());
		jsonObject.put("body", this.body);
		HttpEntity<JSONObject> request = new HttpEntity<>(jsonObject);
		String response = restTemplate.postForObject(this.cloudEndpoint.toString(), request, String.class);

		return response;
	}

	@SuppressWarnings("unchecked")
	private String getHeadersJsonString() {
		JSONObject jsonObject = new JSONObject();
		String value = this.header;
//		String value = "POST /session HTTP/1.1\n" + "User-Agent: selenium/3.141.59 (java unix)\n"
//				+ "Content-Type: application/json; charset=utf-8\n" + "Content-Length: 1097\n"
//				+ "Host: 127.0.1.1:9400\n" + "Connection: Keep-Alive\n" + "Accept-Encoding: gzip";
		String[] lines = value.split("\n");

		jsonObject.put("type", lines[0].split(" ")[0]);
		jsonObject.put("endpoint", lines[0].split(" ")[1]);
		jsonObject.put("protocol", lines[0].split(" ")[2].split("/")[0]);

		for (int i = 1; i < lines.length; i++) {
			String[] split = lines[i].split(": ");
			jsonObject.put(split[0], split[1]);
		}
		System.out.println(jsonObject.toJSONString());
		return jsonObject.toJSONString();
	}

	private void callGETApi() {

		try {
			RestTemplate restTemplate = new RestTemplate();
			JSONObject result = restTemplate.getForObject("http://localhost:9700/status", JSONObject.class);
			System.out.println("RESSS: " + result.toJSONString());
		} catch (Exception e) {
			System.out.println("Server not started. need to start.");
		}
	}


	private void returnpCloudyResponse() {

		System.out.println("Sending Hub Status to Eclipse");
		DateFormat df = new SimpleDateFormat("E, dd MMM yyyy HH:mm:ss z");
		df.setTimeZone(TimeZone.getTimeZone("GMT"));

		String header = "HTTP/1.1 200 OK\n" + "X-Powered-By: Express\n" + "access-control-allow-origin: *\n" + "access-control-allow-methods: GET,POST,PUT,OPTIONS,DELETE\n"
				+ "access-control-allow-headers: origin, content-type, accept\n" + "vary: X-HTTP-Method-Override\n" + "content-type: application/json; charset=utf-8\n" + "content-length: #length#\n"
				+ "ETag: W/\"4c-ls0DQ39q6iMpa8keP7gdpBWjP20\"" + "\n" + "Date: " + df.format(new Date()) + "\n" + "connection: close" + "\n";

		String body = "{\"status\":0,\"value\":{\"build\":{\"version\":\"1.7.1\",\"revision\":null}},\"sessionId\":null}";


		header = header.replace("#length#", body.length() + "");

		try {
			String httpErrorMsg = header + "\n" + body;
			System.out.println("HttpErrorMsg: \n'" + httpErrorMsg + "'");
			this.socketObject.getOutputStream().write(httpErrorMsg.getBytes(StandardCharsets.UTF_8));
			this.socketObject.getOutputStream().flush();

		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public static void main(String[] args) {
		Map<String, String> map = new HashMap<String, String>();

		String value = "POST /session HTTP/1.1\n" + "User-Agent: selenium/3.141.59 (java unix)\n"
				+ "Content-Type: application/json; charset=utf-8\n" + "Content-Length: 1097\n"
				+ "Host: 127.0.1.1:9400\n" + "Connection: Keep-Alive\n" + "Accept-Encoding: gzip";
		String[] lines = value.split("\n");

		map.put("type", lines[0].split(" ")[0]);
		map.put("endpoint", lines[0].split(" ")[1]);
		map.put("protocol", lines[0].split(" ")[2].split("/")[0]);

		for (int i = 1; i < lines.length; i++) {
			String[] split = lines[i].split(": ");
			map.put(split[0], split[1]);
		}

		for (String key : map.keySet()) {
			System.out.println(key + ": " + map.get(key));
		}
	}
}
